//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\anyur\Documents\prog\C#\MyExcel\MyExcel.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MyExcel {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyExcelLexer : Lexer {
	public const int
		NUMBER=1, IDENTIFIER=2, INT=3, EXPONENT=4, MULTIPLY=5, DIVIDE=6, SUBTRACT=7, 
		ADD=8, LPAREN=9, RPAREN=10, EQUALITY=11, GREATER=12, LESS=13, MAX=14, 
		MIN=15, NOT=16, COMA=17, WS=18;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", "SUBTRACT", 
		"ADD", "LPAREN", "RPAREN", "EQUALITY", "GREATER", "LESS", "MAX", "MIN", 
		"NOT", "COMA", "WS"
	};


	public MyExcelLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'^'", "'*'", "'/'", "'-'", "'+'", "'('", "')'", 
		"'='", "'>'", "'<'", "'max'", "'min'", "'not'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", 
		"SUBTRACT", "ADD", "LPAREN", "RPAREN", "EQUALITY", "GREATER", "LESS", 
		"MAX", "MIN", "NOT", "COMA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyExcel.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x14\x63\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x2\x5"+
		"\x2+\n\x2\x3\x3\x6\x3.\n\x3\r\x3\xE\x3/\x3\x3\x3\x3\a\x3\x34\n\x3\f\x3"+
		"\xE\x3\x37\v\x3\x3\x4\x6\x4:\n\x4\r\x4\xE\x4;\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x2\x2"+
		"\x2\x14\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2"+
		"\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11"+
		"!\x2\x12#\x2\x13%\x2\x14\x3\x2\x6\x3\x2\x43\\\x3\x2\x33;\x3\x2\x32;\x5"+
		"\x2\v\f\xF\xF\"\"\x66\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2"+
		"\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2"+
		"\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3"+
		"\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2"+
		"\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x3\'"+
		"\x3\x2\x2\x2\x5-\x3\x2\x2\x2\a\x39\x3\x2\x2\x2\t=\x3\x2\x2\x2\v?\x3\x2"+
		"\x2\x2\r\x41\x3\x2\x2\x2\xF\x43\x3\x2\x2\x2\x11\x45\x3\x2\x2\x2\x13G\x3"+
		"\x2\x2\x2\x15I\x3\x2\x2\x2\x17K\x3\x2\x2\x2\x19M\x3\x2\x2\x2\x1BO\x3\x2"+
		"\x2\x2\x1DQ\x3\x2\x2\x2\x1FU\x3\x2\x2\x2!Y\x3\x2\x2\x2#]\x3\x2\x2\x2%"+
		"_\x3\x2\x2\x2\'*\x5\a\x4\x2()\a\x30\x2\x2)+\x5\a\x4\x2*(\x3\x2\x2\x2*"+
		"+\x3\x2\x2\x2+\x4\x3\x2\x2\x2,.\t\x2\x2\x2-,\x3\x2\x2\x2./\x3\x2\x2\x2"+
		"/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x35\t\x3\x2\x2"+
		"\x32\x34\t\x4\x2\x2\x33\x32\x3\x2\x2\x2\x34\x37\x3\x2\x2\x2\x35\x33\x3"+
		"\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x6\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x38"+
		":\x4\x32;\x2\x39\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2"+
		"\x2\x2<\b\x3\x2\x2\x2=>\a`\x2\x2>\n\x3\x2\x2\x2?@\a,\x2\x2@\f\x3\x2\x2"+
		"\x2\x41\x42\a\x31\x2\x2\x42\xE\x3\x2\x2\x2\x43\x44\a/\x2\x2\x44\x10\x3"+
		"\x2\x2\x2\x45\x46\a-\x2\x2\x46\x12\x3\x2\x2\x2GH\a*\x2\x2H\x14\x3\x2\x2"+
		"\x2IJ\a+\x2\x2J\x16\x3\x2\x2\x2KL\a?\x2\x2L\x18\x3\x2\x2\x2MN\a@\x2\x2"+
		"N\x1A\x3\x2\x2\x2OP\a>\x2\x2P\x1C\x3\x2\x2\x2QR\ao\x2\x2RS\a\x63\x2\x2"+
		"ST\az\x2\x2T\x1E\x3\x2\x2\x2UV\ao\x2\x2VW\ak\x2\x2WX\ap\x2\x2X \x3\x2"+
		"\x2\x2YZ\ap\x2\x2Z[\aq\x2\x2[\\\av\x2\x2\\\"\x3\x2\x2\x2]^\a.\x2\x2^$"+
		"\x3\x2\x2\x2_`\t\x5\x2\x2`\x61\x3\x2\x2\x2\x61\x62\b\x13\x2\x2\x62&\x3"+
		"\x2\x2\x2\a\x2*/\x35;\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MyExcel
